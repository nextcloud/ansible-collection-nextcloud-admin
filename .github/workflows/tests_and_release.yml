---
name: Collection tests
"on":
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check_version_change:
    name: check-new-version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.check-galaxy-version.outputs.new_version }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 9.9.9.9

      - name: Check if 'version' has changed in galaxy.yml
        id: check-galaxy-version
        shell: bash
        env:
          current_version: ${{ steps.previoustag.outputs.tag }}
        run: |
          compare_semver() {
            version_test=(${1//./ })
            version_ref=(${2//./ })
            for ((i=0; i<${#version_test[@]}; i++)); do
              if [[ -z ${version_ref[i]} ]]; then
                return 0
              elif [[ ${version_test[i]} -gt ${version_ref[i]} ]]; then
                return 0
              elif [[ ${version_test[i]} -lt ${version_ref[i]} ]]; then
                return 1
              fi
            done
            return 1
          }
          set -x
          galaxy_version=$(git diff HEAD~ HEAD -- galaxy.yml | grep 'version:' || true | awk '{ print $2}')
          if [ -z "$galaxy_version" ]; then
            echo "new_version=false" >> $GITHUB_OUTPUT
          elif $(compare_semver "$galaxy_version" "$current_version"); then
            echo "new_version=true" >> $GITHUB_OUTPUT
          else
            echo "new_version=false" >> $GITHUB_OUTPUT
          fi

  large_collection_tests:
    name: release tests
    uses: ./.github/workflows/collection-tests.yml
    needs: check_version_change
    if: (needs.check_version_change.outputs.new_version == true) && (github.ref_name == 'main')
    with:
      distros: "['debian12', 'debian11', 'ubuntu2204', 'ubuntu2404']"
      nc_versions: "['latest', 'nc30', 'nc29']"

  collection_tests:
    name: normal tests
    uses: ./.github/workflows/collection-tests.yml
    needs: check_version_change
    if: (needs.check_version_change.outputs.new_version == false) || (github.ref_name != 'main')

  tag_release:
    name: new-tag
    runs-on: ubuntu-latest
    needs: large_collection_tests
    steps:
      - name: Detect and tag new version
        id: check-version
        uses: salsify/action-detect-and-tag-new-version@v2
        with:
          tag-template: "{VERSION}"
          version-command: |
            cat galaxy.yml | grep version: | cut -d' ' -f2

      - name: Publish the release notes
        uses: release-drafter/release-drafter@v6
        with:
          publish: ${{ steps.check-version.outputs.tag != '' }}
          tag: ${{ steps.check-version.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  publish_to_galaxy:
    name: publish
    runs-on: ubuntu-latest
    needs: tag_release
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: install ansible
        run: |
          pip install --upgrade --constraint=.github/workflows/constraints.txt pip
          pip --version
          pip install --upgrade --constraint=.github/workflows/constraints.txt ansible

      - name: Release to Ansible Galaxy.
        env:
          ANSIBLE_GALAXY_TOKEN: ${{ secrets.GALAXY_TOKEN }}
        run: >-
          ansible-playbook -i 'localhost,' galaxy-deploy.yml
          -e "github_tag=$(cat galaxy.yml|grep version:|cut -d' ' -f2)"
          -e "ansible_namespace=$(echo ${{ github.repository }}
          | cut -d/ -f1)"
          -e "collection=admin"
