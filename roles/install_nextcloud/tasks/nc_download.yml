---
- name: "[NC-DL] - Unzip is installed"
  ansible.builtin.package:
    name: unzip
    state: present
  when: nextcloud_archive_format == "zip"

- name: "[NC-DL] - bunzip2 is installed"
  ansible.builtin.package:
    name: bzip2
    state: present
  when: nextcloud_archive_format == "tar.bz2"

- name: "[NC-DL] - You must specify the major version"
  ansible.builtin.assert:
    that: nextcloud_version_major is defined
  when: nextcloud_full_url is defined

- name: "[NC-DL] - Create and set directory ownership & permissions for the webroot folder"
  ansible.builtin.file:
    path: "{{ nextcloud_webroot }}"
    mode: "u=rwX,g=rX,o-rwx"
    recurse: true
    state: directory
    owner: "{{ nextcloud_websrv_user }}"
    group: "{{ nextcloud_websrv_group }}"

- name: "Download and extract Nextcloud"
  block:
    - name: "[NC-DL] - Download & extract Nextcloud to /tmp."
      ansible.builtin.unarchive:
        copy: false
        src: "{{ nextcloud_full_url | default(nextcloud_calculated_url) }}"
        dest: "/tmp/"
      vars:
        nextcloud_calculated_url: "{{ nextcloud_repository }}/{{ nextcloud_version_channel }}/{{ nextcloud_calculated_file }}"
        nextcloud_calculated_file: "{{ [nextcloud_dl_file_name[just_a_dict_key], nextcloud_archive_format] | join('.') }}"
        just_a_dict_key: "{{ 'latest' if ((nextcloud_get_latest | bool) and (nextcloud_version_channel != 'prereleases')) else nextcloud_version_channel }}"

    - name: "[NC-DL] - Move extracted files to {{ nextcloud_webroot }}"
      ansible.builtin.command: "cp -r /tmp/nextcloud/. {{ nextcloud_webroot }}/"
      when: nextcloud_webroot is not none

    - name: "[NC-DL] - Remove nextcloud archive files"
      ansible.builtin.file:
        path: /tmp/nextcloud
        state: absent
